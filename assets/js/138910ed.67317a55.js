"use strict";(self.webpackChunkskima_docs=self.webpackChunkskima_docs||[]).push([[398],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),g=i,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||r;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},333:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"get_started_ios",title:"Getting started with iOS",sidebar_position:1},s=void 0,p={unversionedId:"ios/get_started_ios",id:"ios/get_started_ios",title:"Getting started with iOS",description:"Libraries",source:"@site/docs/ios/get_started_ios.md",sourceDirName:"ios",slug:"/ios/get_started_ios",permalink:"/docs/ios/get_started_ios",editUrl:"https://github.com/Skima-Framework/docs/ios/get_started_ios.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"get_started_ios",title:"Getting started with iOS",sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Contracts",permalink:"/docs/contracts"},next:{title:"Standard UI",permalink:"/docs/ios/standard_ui"}},c={},d=[{value:"Libraries",id:"libraries",level:2},{value:"Code in your app",id:"code-in-your-app",level:2},{value:"Register modules",id:"register-modules",level:3},{value:"Create screens",id:"create-screens",level:3},{value:"Test Screens",id:"test-screens",level:4},{value:"Create your own Widgets",id:"create-your-own-widgets",level:2},{value:"Step 1: Create the props model",id:"step-1-create-the-props-model",level:3},{value:"Step 2: Create the Widget class",id:"step-2-create-the-widget-class",level:3},{value:"Step 3: Create the manipulators",id:"step-3-create-the-manipulators",level:3},{value:"Step 4: Registering the Widget in your app",id:"step-4-registering-the-widget-in-your-app",level:3},{value:"Step 5: Use the Widget from the BFF",id:"step-5-use-the-widget-from-the-bff",level:3},{value:"Create your own Actions",id:"create-your-own-actions",level:2},{value:"Step 1: Create the ActionData model",id:"step-1-create-the-actiondata-model",level:3},{value:"Step 2: Register the Action in your app",id:"step-2-register-the-action-in-your-app",level:3},{value:"Step 3: Use the Action from the BFF",id:"step-3-use-the-action-from-the-bff",level:3}],u={toc:d};function g(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"libraries"},"Libraries"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1:")," Install the Skima library, which has all the Core logic of the framework:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Podfile"',title:'"Podfile"'},"pod 'Skima'\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2:")," Create custom widgets or use some UI library. In our case we will use the SkimaStandardUI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Podfile"',title:'"Podfile"'},"pod 'SkimaStandardUI'\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3:")," Create custom actions or use any Actions library. In our case we will use the SkimaStandardActions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Podfile"',title:'"Podfile"'},"pod 'SkimaStandardActions'\n")),(0,r.kt)("p",null,"Done! With these three libraries you already have everything installed!!"),(0,r.kt)("h2",{id:"code-in-your-app"},"Code in your app"),(0,r.kt)("h3",{id:"register-modules"},"Register modules"),(0,r.kt)("p",null,"Both the Actions and Widgets modules must be registered in Skima. For this, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"AppDelegate")," place:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="AppDelegate.swift"',title:'"AppDelegate.swift"'},"import Skima\nimport SkimaStandardUI\nimport SkimaStandardActions\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    WidgetsEngine.shared.registerOrReplace(SkimaStandardUI.self) // Here the Widgets module is registered\n    ActionsEngine.shared.registerOrReplace(SkimaStandardActions.self) // Here the Actions module is registered\n\n    return true\n}\n")),(0,r.kt)("h3",{id:"create-screens"},"Create screens"),(0,r.kt)("p",null,"To use a screen from a Skima contract we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"SkimaViewController")," which receives in its constructor the url from which to download the contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let viewController = SkimaViewController(fromEndpoint: "https://...")\n')),(0,r.kt)("p",null,"If what you want is to start the application from a contract you can place the following method in the ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneDelegate"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import Skima\n\nfunc scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n    guard let scene = (scene as? UIWindowScene) else { return }\n    \n    window = UIWindow(windowScene: scene)\n\n    let viewController = SkimaViewController(fromEndpoint: "https://...")\n    let navigationController = UINavigationController(rootViewController: viewController)\n    NavigationEngine.shared.setNavigationController(navigationController) // This tells Skima which navigationController to use for navigation\n    window?.rootViewController = navigationController\n    window?.makeKeyAndVisible()\n}\n')),(0,r.kt)("h4",{id:"test-screens"},"Test Screens"),(0,r.kt)("p",null,"To quickly test that everything is ok you can use the following screen contract as a demo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"https://run.mocky.io/v3/f960b018-feca-4860-bcaf-b31b66bd95b7\n")),(0,r.kt)("h2",{id:"create-your-own-widgets"},"Create your own Widgets"),(0,r.kt)("p",null,"Each Widget has three parts: 1. props model, 2. widget's class, 3. Manipulators. So, lets create a simple Label widget as example!"),(0,r.kt)("h3",{id:"step-1-create-the-props-model"},"Step 1: Create the props model"),(0,r.kt)("p",null,"The props model is a struct that conform the WidgetPropsType protocol:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="LabelProps.swift"',title:'"LabelProps.swift"'},"import Skima\n\nstruct LabelProps: WidgetPropsType {\n    var text: String?\n    var fontSize: Double?\n}\n")),(0,r.kt)("h3",{id:"step-2-create-the-widget-class"},"Step 2: Create the Widget class"),(0,r.kt)("p",null,"The Widget class must conform the UIWidget protocol:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Label.swift"',title:'"Label.swift"'},"import UIKit\nimport Skima\n\nclass Label: UILabel, UIWidget {\n    static var manipulators: [ActionSchema] = []\n\n    var widget: Widget\n    private var props: LabelProps?\n\n    required init(from: widget Widget) {\n        self.widget = widget\n        self.props = widget.props as? LabelProps\n        super.init(frame: .zero)\n        configureView()\n    }\n\n    private func configureView() {\n        setText(text: props?.text)\n        setFontSize(props?.fontSize)\n    }\n\n    private func setText(text: String?) {\n        self.text = text\n    }\n\n    private func setFontSize(size: Double?) {\n        guard let _size = size else { return }\n        font = font.withSize(CGFloat(_size))\n    }\n}\n")),(0,r.kt)("h3",{id:"step-3-create-the-manipulators"},"Step 3: Create the manipulators"),(0,r.kt)("p",null,"The manipulators are Actions that are applied to a given Widget, for example to change its color, its content or its state."),(0,r.kt)("p",null,"To create a Widget manipulator we need to create a class that conform the WidgetManipulatorData protocol and include this class in the manipulators array of the Widget itself:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="LabelManipulator.swift"',title:'"LabelManipulator.swift"'},'import Skima\n\nclass LabelManipulator: WidgetManipulatorData {\n    var widgetId: String?\n    var type: String?\n    var value: String?\n\n    func execute(from scopes: [Scope]?) {\n        guard let _widgetId = widgetId,\n              let _widget = WidgetsEngine.shared.getWidgetBy(id: _widgetId, from: scopes) as? Label\n        else { return }\n\n        switch type {\n        case "change_text":\n            widget.setText(value)\n        default:\n            break\n        }\n    }\n\n}\n')),(0,r.kt)("p",null,"Then, back in the Widget class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Label.swift"',title:'"Label.swift"'},'...\nclass Label: UILabel, UIWidget {\n    static var manipulators = [ActionSchema(type: "labelManipulation", actionData: LabelManipulator.self)]\n\n...\n')),(0,r.kt)("p",null,"That's it, you have created your own Skima Widget! Now there is only one step left..."),(0,r.kt)("h3",{id:"step-4-registering-the-widget-in-your-app"},"Step 4: Registering the Widget in your app"),(0,r.kt)("p",null,"Now we need to let Skima know the new Widget so we have to register it. To do that we have to code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="AppDelegate.swift"',title:'"AppDelegate.swift"'},'import Skima\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    WidgetsEngine.shared.registerOrReplace(WidgetSchema(type: "label", view: Label.self, props: LabelProps.self)) // Label is the new Widget\n    return true\n}\n')),(0,r.kt)("p",null,"We did it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"AppDelegate")," but you can do it wherever you want."),(0,r.kt)("h3",{id:"step-5-use-the-widget-from-the-bff"},"Step 5: Use the Widget from the BFF"),(0,r.kt)("p",null,"Now we can use the new Widget with the following JSON:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n    "type": "label",\n    "id": "label_1",\n    "props": {\n        "text": "Hello Skima!",\n        "fontSize": 16\n    }\n}\n')),(0,r.kt)("p",null,"If we want to change its text we use the following action:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n    "type": "labelManipulation",\n    "data": {\n        "widgetId": "label_1",\n        "type": "change_text",\n        "value": "This is the new text"\n    }\n}\n')),(0,r.kt)("h2",{id:"create-your-own-actions"},"Create your own Actions"),(0,r.kt)("p",null,"Creating an Action is even simpler!"),(0,r.kt)("h3",{id:"step-1-create-the-actiondata-model"},"Step 1: Create the ActionData model"),(0,r.kt)("p",null,"The ActionData struct will have the data of the action and its logic. It must conform the ActionDataType protocol:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="CloseAppActionData.swift"',title:'"CloseAppActionData.swift"'},"import Skima\n\nstruct CloseAppActionData: ACtionDataType {\n    let consoleMessage: String?\n\n    func execute(from scopes: [Scope]?) {\n        print(consoleMessage)\n        NSApplication.shared.terminate(self)\n    }\n}\n\n")),(0,r.kt)("h3",{id:"step-2-register-the-action-in-your-app"},"Step 2: Register the Action in your app"),(0,r.kt)("p",null,"Now we need to let Skima know the new Action so we have to register it. To do that we have to code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="AppDelegate.swift"',title:'"AppDelegate.swift"'},'import Skima\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    ActionsEngine.shared.registerOrReplace(ActionSchema(type: "close_app", CloseAppActionData: LabelProps.self)) // close_app is the new Widget\n    return true\n}\n')),(0,r.kt)("p",null,"We did it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"AppDelegate")," but you can do it wherever you want."),(0,r.kt)("h3",{id:"step-3-use-the-action-from-the-bff"},"Step 3: Use the Action from the BFF"),(0,r.kt)("p",null,"Now we can use the new Action with the following JSON:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n    "type": "close_app",\n    "data": {\n        "consoleMessage": "Closing the app..."\n    }\n}\n')))}g.isMDXComponent=!0}}]);